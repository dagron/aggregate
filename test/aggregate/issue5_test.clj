(ns aggregate.issue5-test
  (:require  [clojure.test :refer :all]
             [aggregate.core :as agg]
             [aggregate.testsupport :refer :all]
             [clojure.java.jdbc :as jdbc]))


;; https://github.com/friemen/aggregate/issues/5

(use-fixtures :each db-fixture)


(def ddl ["CREATE TABLE animal (id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, phylum VARCHAR(80));"
          "CREATE TABLE cow (id INTEGER NOT NULL, breed VARCHAR(80), FOREIGN KEY (id) REFERENCES animal (id));"])


(def er
  (agg/make-er-config
   (agg/entity :animal)
   (agg/entity :cow
               (agg/->1 :animal :animal {:fk-kw :id}))))


(defn setup!
  []
  (doseq [stmt ddl]
    (jdbc/execute! @db-con [stmt])))


(deftest save-test
  (setup!)
  (let [db-spec   @db-con
        m         {:animal {:phylum "Chordata"} :breed "Friesian"}
        expected  {::agg/entity :cow
                   :id 1
                   :animal {::agg/entity :animal
                            :id 1
                            :phylum "Chordata"}
                   :breed "Friesian"}]
    (agg/save! er db-spec :cow m)
    (is (= expected (agg/load er db-spec :cow 1)))))
